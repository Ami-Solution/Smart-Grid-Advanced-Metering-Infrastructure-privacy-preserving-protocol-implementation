//
// Generated file, do not edit! Created by nedtool 5.0 from KPPacket.msg.
//

#ifndef __SMART3P_KPPACKET_M_H
#define __SMART3P_KPPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace smart3p {

/**
 * Class generated from <tt>KPPacket.msg:6</tt> by nedtool.
 * <pre>
 * //
 * // Key Pair Packet
 * //
 * packet KPPacket
 * {
 *     int id;
 *     double value;
 *     int smGateID;
 *     int collGateID;
 *     int privatePieceSize;
 *     string privatePieceBytes;
 *     int privatePartialSize;
 *     string privatePartialBytes;
 *     int publicPieceSize;
 *     string publicPieceBytes;
 *     int publicPartialSize;
 *     string publicPartialBytes;
 * 
 * 
 * }
 * </pre>
 */
class KPPacket : public ::omnetpp::cPacket
{
  protected:
    int id;
    double value;
    int smGateID;
    int collGateID;
    int privatePieceSize;
    ::omnetpp::opp_string privatePieceBytes;
    int privatePartialSize;
    ::omnetpp::opp_string privatePartialBytes;
    int publicPieceSize;
    ::omnetpp::opp_string publicPieceBytes;
    int publicPartialSize;
    ::omnetpp::opp_string publicPartialBytes;

  private:
    void copy(const KPPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KPPacket&);

  public:
    KPPacket(const char *name=nullptr, int kind=0);
    KPPacket(const KPPacket& other);
    virtual ~KPPacket();
    KPPacket& operator=(const KPPacket& other);
    virtual KPPacket *dup() const {return new KPPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual double getValue() const;
    virtual void setValue(double value);
    virtual int getSmGateID() const;
    virtual void setSmGateID(int smGateID);
    virtual int getCollGateID() const;
    virtual void setCollGateID(int collGateID);
    virtual int getPrivatePieceSize() const;
    virtual void setPrivatePieceSize(int privatePieceSize);
    virtual const char * getPrivatePieceBytes() const;
    virtual void setPrivatePieceBytes(const char * privatePieceBytes);
    virtual int getPrivatePartialSize() const;
    virtual void setPrivatePartialSize(int privatePartialSize);
    virtual const char * getPrivatePartialBytes() const;
    virtual void setPrivatePartialBytes(const char * privatePartialBytes);
    virtual int getPublicPieceSize() const;
    virtual void setPublicPieceSize(int publicPieceSize);
    virtual const char * getPublicPieceBytes() const;
    virtual void setPublicPieceBytes(const char * publicPieceBytes);
    virtual int getPublicPartialSize() const;
    virtual void setPublicPartialSize(int publicPartialSize);
    virtual const char * getPublicPartialBytes() const;
    virtual void setPublicPartialBytes(const char * publicPartialBytes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KPPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KPPacket& obj) {obj.parsimUnpack(b);}

} // namespace smart3p

#endif // ifndef __SMART3P_KPPACKET_M_H

