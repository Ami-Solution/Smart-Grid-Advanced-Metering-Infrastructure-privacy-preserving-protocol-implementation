//
// Generated file, do not edit! Created by nedtool 5.0 from HMACPayloadPacket.msg.
//

#ifndef __SMART3P_HMACPAYLOADPACKET_M_H
#define __SMART3P_HMACPAYLOADPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace smart3p {

/**
 * Class generated from <tt>HMACPayloadPacket.msg:6</tt> by nedtool.
 * <pre>
 * //
 * // HMACPayload Packet
 * //
 * packet HMACPayloadPacket
 * {
 *     int id;
 *     double value;
 *     int smGateID;
 *     int collGateID;
 *     int messageLength;
 *     int hmacSize;
 *     string hmac;
 *     int c1Size;
 *     string c1Bytes;
 *     int c21Size;
 *     string c21Bytes;
 *     int c22Size;
 *     string c22Bytes;
 *     int idSize;
 *     string idBytes;
 *     int rSize;
 *     string rBytes;
 *     int timeStampSize;
 *     string timeStampBytes;
 * 
 * }
 * </pre>
 */
class HMACPayloadPacket : public ::omnetpp::cPacket
{
  protected:
    int id;
    double value;
    int smGateID;
    int collGateID;
    int messageLength;
    int hmacSize;
    ::omnetpp::opp_string hmac;
    int c1Size;
    ::omnetpp::opp_string c1Bytes;
    int c21Size;
    ::omnetpp::opp_string c21Bytes;
    int c22Size;
    ::omnetpp::opp_string c22Bytes;
    int idSize;
    ::omnetpp::opp_string idBytes;
    int rSize;
    ::omnetpp::opp_string rBytes;
    int timeStampSize;
    ::omnetpp::opp_string timeStampBytes;

  private:
    void copy(const HMACPayloadPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HMACPayloadPacket&);

  public:
    HMACPayloadPacket(const char *name=nullptr, int kind=0);
    HMACPayloadPacket(const HMACPayloadPacket& other);
    virtual ~HMACPayloadPacket();
    HMACPayloadPacket& operator=(const HMACPayloadPacket& other);
    virtual HMACPayloadPacket *dup() const {return new HMACPayloadPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual double getValue() const;
    virtual void setValue(double value);
    virtual int getSmGateID() const;
    virtual void setSmGateID(int smGateID);
    virtual int getCollGateID() const;
    virtual void setCollGateID(int collGateID);
    virtual int getMessageLength() const;
    virtual void setMessageLength(int messageLength);
    virtual int getHmacSize() const;
    virtual void setHmacSize(int hmacSize);
    virtual const char * getHmac() const;
    virtual void setHmac(const char * hmac);
    virtual int getC1Size() const;
    virtual void setC1Size(int c1Size);
    virtual const char * getC1Bytes() const;
    virtual void setC1Bytes(const char * c1Bytes);
    virtual int getC21Size() const;
    virtual void setC21Size(int c21Size);
    virtual const char * getC21Bytes() const;
    virtual void setC21Bytes(const char * c21Bytes);
    virtual int getC22Size() const;
    virtual void setC22Size(int c22Size);
    virtual const char * getC22Bytes() const;
    virtual void setC22Bytes(const char * c22Bytes);
    virtual int getIdSize() const;
    virtual void setIdSize(int idSize);
    virtual const char * getIdBytes() const;
    virtual void setIdBytes(const char * idBytes);
    virtual int getRSize() const;
    virtual void setRSize(int rSize);
    virtual const char * getRBytes() const;
    virtual void setRBytes(const char * rBytes);
    virtual int getTimeStampSize() const;
    virtual void setTimeStampSize(int timeStampSize);
    virtual const char * getTimeStampBytes() const;
    virtual void setTimeStampBytes(const char * timeStampBytes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HMACPayloadPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HMACPayloadPacket& obj) {obj.parsimUnpack(b);}

} // namespace smart3p

#endif // ifndef __SMART3P_HMACPAYLOADPACKET_M_H

