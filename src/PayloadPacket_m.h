//
// Generated file, do not edit! Created by nedtool 5.0 from PayloadPacket.msg.
//

#ifndef __SMART3P_PAYLOADPACKET_M_H
#define __SMART3P_PAYLOADPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace smart3p {

/**
 * Class generated from <tt>PayloadPacket.msg:6</tt> by nedtool.
 * <pre>
 * //
 * // Payload Packet
 * //
 * packet PayloadPacket
 * {
 *     int id;
 *     double value;
 *     int smGateID;
 *     int collGateID;
 *     int pSize;
 *     string pBytes;
 *     int qSize;
 *     string qBytes;
 *     int gSize;
 *     string gBytes;
 *     int xSize;
 *     string xBytes;
 *     int privateSize;
 *     string privateBytes;
 *     int publicSize;
 *     string publicBytes;
 * 
 * }
 * </pre>
 */
class PayloadPacket : public ::omnetpp::cPacket
{
  protected:
    int id;
    double value;
    int smGateID;
    int collGateID;
    int pSize;
    ::omnetpp::opp_string pBytes;
    int qSize;
    ::omnetpp::opp_string qBytes;
    int gSize;
    ::omnetpp::opp_string gBytes;
    int xSize;
    ::omnetpp::opp_string xBytes;
    int privateSize;
    ::omnetpp::opp_string privateBytes;
    int publicSize;
    ::omnetpp::opp_string publicBytes;

  private:
    void copy(const PayloadPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PayloadPacket&);

  public:
    PayloadPacket(const char *name=nullptr, int kind=0);
    PayloadPacket(const PayloadPacket& other);
    virtual ~PayloadPacket();
    PayloadPacket& operator=(const PayloadPacket& other);
    virtual PayloadPacket *dup() const {return new PayloadPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual double getValue() const;
    virtual void setValue(double value);
    virtual int getSmGateID() const;
    virtual void setSmGateID(int smGateID);
    virtual int getCollGateID() const;
    virtual void setCollGateID(int collGateID);
    virtual int getPSize() const;
    virtual void setPSize(int pSize);
    virtual const char * getPBytes() const;
    virtual void setPBytes(const char * pBytes);
    virtual int getQSize() const;
    virtual void setQSize(int qSize);
    virtual const char * getQBytes() const;
    virtual void setQBytes(const char * qBytes);
    virtual int getGSize() const;
    virtual void setGSize(int gSize);
    virtual const char * getGBytes() const;
    virtual void setGBytes(const char * gBytes);
    virtual int getXSize() const;
    virtual void setXSize(int xSize);
    virtual const char * getXBytes() const;
    virtual void setXBytes(const char * xBytes);
    virtual int getPrivateSize() const;
    virtual void setPrivateSize(int privateSize);
    virtual const char * getPrivateBytes() const;
    virtual void setPrivateBytes(const char * privateBytes);
    virtual int getPublicSize() const;
    virtual void setPublicSize(int publicSize);
    virtual const char * getPublicBytes() const;
    virtual void setPublicBytes(const char * publicBytes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PayloadPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PayloadPacket& obj) {obj.parsimUnpack(b);}

} // namespace smart3p

#endif // ifndef __SMART3P_PAYLOADPACKET_M_H

